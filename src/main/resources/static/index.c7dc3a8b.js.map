{"mappings":"MAAaA,gBAETC,KAAKC,gBAAiB,EACtBD,KAAKE,cAAgB,GACrBF,KAAKG,kBACLH,KAAKI,SAAW,KAChBJ,KAAKK,MAAQ,GACbL,KAAKM,WAAa,GAGpBC,gBAAgBC,EAAaC,GAC3B,IAAIC,EAAe,GAInB,IAHIF,EAAYG,EAAIF,EAAcE,GAAKH,EAAYI,EAAIH,EAAcG,MAClEH,EAAeD,GAAe,CAACA,EAAaC,IAE3CD,EAAYI,IAAMH,EAAcG,EAClC,IAAK,IAAIC,EAAIL,EAAYG,EAAGE,GAAKJ,EAAcE,EAAGE,IAEhDH,EAAaI,KACXd,KAAKI,SAASW,cAAa,cACXF,eAAeJ,EAAcG,aAI5C,GAAIJ,EAAYG,IAAMF,EAAcE,EACzC,IAAK,IAAIK,EAAIR,EAAYI,EAAGI,GAAKP,EAAcG,EAAGI,IAEhDN,EAAaI,KACXd,KAAKI,SAASW,cAAa,cACXN,EAAcE,eAAeK,aAI5C,GACLP,EAAcG,EAAIJ,EAAYI,GAC9BH,EAAcE,EAAIH,EAAYG,EAC9B,CACA,IAAIM,EAAQR,EAAcG,EAAIJ,EAAYI,EAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAII,EAAOJ,IAEzBH,EAAaI,KACXd,KAAKI,SAASW,cAAa,cACXP,EAAYG,EAAIE,eAAeL,EAAYI,EAAIC,QAMrE,OAAOH,EAETQ,WAAWC,EAAUC,GACnB,IAAIhB,EAAWiB,SAASC,uBAAuB,aAAa,GACxDlB,EAASmB,WACXnB,EAASoB,YAAYpB,EAASmB,WAGhCvB,KAAKI,SAAWA,EAChB,IAAIqB,EAAMJ,SAASK,cAAc,SAC7BC,EAAUN,SAASK,cAAc,SACrC,IAAIE,EAAQ,EACZ,IAAK,IAAIf,EAAI,EAAGA,EAAIM,EAAUN,IAAK,CAGjC,IAFA,IAAIgB,EAAMR,SAASK,cAAc,MAExBI,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CACjC,IAAIC,EAAOV,SAASK,cAAc,MAClC,IAAIM,EAASZ,EAASQ,KACtB,IAAIK,EAAWZ,SAASa,eAAeF,GACvCD,EAAKI,YAAYF,GACjBF,EAAKK,aAAa,SAAUvB,GAC5BkB,EAAKK,aAAa,SAAUN,GAC5BC,EAAKK,aAAa,cAAeJ,GAEjCH,EAAIM,YAAYJ,GAGlBJ,EAAQQ,YAAYN,GAGtBJ,EAAIU,YAAYR,GAChBvB,EAAS+B,YAAYV,GAGrBA,EAAIY,iBAAiB,aAAcC,IACjCtC,KAAKC,gBAAiB,EACtB,MAAM8B,EAAOO,EAAMC,OACnB,IAAI5B,GAAKoB,EAAKS,aAAa,UACvB5B,GAAKmB,EAAKS,aAAa,UACdT,EAAKS,aAAa,eAC/BxC,KAAKG,kBAAoB,GACvBQ,IACAC,MAGJa,EAAIY,iBAAiB,aAAcC,IACjC,GAAItC,KAAKC,eAAgB,CACvB,MAAMwC,EAAOH,EAAMC,OAEnB,IAAI5B,GAAK8B,EAAKD,aAAa,UACvB5B,GAAK6B,EAAKD,aAAa,UACdC,EAAKD,aAAa,eAC/BxC,KAAKE,cAAcwC,SAASX,GAASA,EAAKY,UAAUC,OAAO,cAC3D5C,KAAKE,cAAgBF,KAAKO,gBAAgBP,KAAKG,kBAAmB,GAChEQ,IACAC,IAEFZ,KAAKE,cAAcwC,SAASX,GAASA,EAAKY,UAAUE,IAAI,kBAG5DpB,EAAIY,iBAAiB,WAAYC,IAC/BtC,KAAKC,gBAAiB,EACtB,MAAM6C,EAAe9C,KAAKE,cAAc6C,QAAM,CAC3CC,EAAMjB,IAAUiB,EAAQjB,EAAKS,aAAa,gBAC3C,IAGIS,EAAsBH,EAAaI,MAAM,IAAIC,UAAUC,KAAK,KACzB,IAArCpD,KAAKK,MAAMgD,QAAQP,GACrB9C,KAAKM,WAAWQ,KAAKgC,IACgC,IAA5C9C,KAAKK,MAAMgD,QAAQJ,GAC5BjD,KAAKM,WAAWQ,KAAKmC,GAErBjD,KAAKE,cAAcwC,SAASY,GAASA,EAAKX,UAAUC,OAAO,cAE7D5C,KAAKE,cAAgB,OCxHLmB,SAASN,cAAc,gBAI/BsB,iBAAiB,SAAOkB,UAClC,MAAMC,EAAO,IAAIzD,EACX0D,EAAsBpC,SAASN,cAAc,aAAa2C,MAC1DvC,EAAWE,SAASN,cAAc,cAAc2C,MACtD,IAAIC,uBAaqBxC,EAAUsC,GAEnC,IAAIG,QAAiBC,MAAK,2CAA4C1C,cAAqBsC,KAE3F,aADmBG,EAASE,QACdZ,MAAM,KAjBDa,CAAc5C,EAAUsC,GAC3CD,EAAKnD,MAAQoD,EAAoBP,MAAM,KACvCM,EAAKtC,WAAWC,EAAUwC,GAC1B,IAAIK,EAAc3C,SAASa,eAAesB,EAAKnD,OAC3C4D,EAAkB5C,SAASN,cAAc,cAGzCkD,EAAgB1C,WAClB0C,EAAgBzC,YAAYyC,EAAgB1C,WAE9C0C,EAAgB9B,YAAY6B","sources":["src/js/grid.js","src/js/index.js"],"sourcesContent":["export class Grid {\r\n  constructor() {\r\n    this.wordSelectMode = false;\r\n    this.selectedItems = [];\r\n    this.firstSelectedItem;\r\n    this.gridArea = null;\r\n    this.words = [];\r\n    this.foundWords = [];\r\n  }\r\n\r\n  getCellsInrange(firstLetter, currentLetter) {\r\n    let cellsInRange = [];\r\n    if (firstLetter.x > currentLetter.x || firstLetter.y > currentLetter.y) {\r\n      [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n    }\r\n    if (firstLetter.y === currentLetter.y) {\r\n      for (let i = firstLetter.x; i <= currentLetter.x; i++) {\r\n        //console.log(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n        cellsInRange.push(\r\n          this.gridArea.querySelector(\r\n            `td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`\r\n          )\r\n        );\r\n      }\r\n    } else if (firstLetter.x === currentLetter.x) {\r\n      for (let i = firstLetter.y; i <= currentLetter.y; i++) {\r\n        //console.log(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n        cellsInRange.push(\r\n          this.gridArea.querySelector(\r\n            `td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`\r\n          )\r\n        );\r\n      }\r\n    } else if (\r\n      currentLetter.y - firstLetter.y ===\r\n      currentLetter.x - firstLetter.x\r\n    ) {\r\n      let delta = currentLetter.y - firstLetter.y;\r\n      for (let i = 0; i < delta; i++) {\r\n        //console.log(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n        cellsInRange.push(\r\n          this.gridArea.querySelector(\r\n            `td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y + i}\"]`\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    return cellsInRange;\r\n  }\r\n  renderGrid(gridSize, wordGrid) {\r\n    var gridArea = document.getElementsByClassName(\"grid-area\")[0];\r\n    if (gridArea.lastChild) {\r\n      gridArea.removeChild(gridArea.lastChild);\r\n    }\r\n\r\n    this.gridArea = gridArea;\r\n    var tbl = document.createElement(\"table\");\r\n    var tblBody = document.createElement(\"tbody\");\r\n    let index = 0;\r\n    for (var i = 0; i < gridSize; i++) {\r\n      var row = document.createElement(\"tr\");\r\n\r\n      for (var j = 0; j < gridSize; j++) {\r\n        var cell = document.createElement(\"td\");\r\n        let letter = wordGrid[index++];\r\n        var cellText = document.createTextNode(letter);\r\n        cell.appendChild(cellText);\r\n        cell.setAttribute(\"data-x\", i);\r\n        cell.setAttribute(\"data-y\", j);\r\n        cell.setAttribute(\"data-letter\", letter);\r\n\r\n        row.appendChild(cell);\r\n      }\r\n\r\n      tblBody.appendChild(row);\r\n    }\r\n\r\n    tbl.appendChild(tblBody);\r\n    gridArea.appendChild(tbl);\r\n\r\n    //onclick handlers\r\n    tbl.addEventListener(\"mousedown\", (event) => {\r\n      this.wordSelectMode = true;\r\n      const cell = event.target;\r\n      let x = +cell.getAttribute(\"data-x\");\r\n      let y = +cell.getAttribute(\"data-y\");\r\n      let letter = cell.getAttribute(\"data-letter\");\r\n      this.firstSelectedItem = {\r\n        x,\r\n        y,\r\n      };\r\n    });\r\n    tbl.addEventListener(\"mousemove\", (event) => {\r\n      if (this.wordSelectMode) {\r\n        const cell = event.target;\r\n        //cell.classList.add(\"selected\");\r\n        let x = +cell.getAttribute(\"data-x\");\r\n        let y = +cell.getAttribute(\"data-y\");\r\n        let letter = cell.getAttribute(\"data-letter\");\r\n        this.selectedItems.forEach((cell) => cell.classList.remove(\"selected\"));\r\n        this.selectedItems = this.getCellsInrange(this.firstSelectedItem, {\r\n          x,\r\n          y,\r\n        });\r\n        this.selectedItems.forEach((cell) => cell.classList.add(\"selected\"));\r\n      }\r\n    });\r\n    tbl.addEventListener(\"mouseup\", (event) => {\r\n      this.wordSelectMode = false;\r\n      const selectedWord = this.selectedItems.reduce(\r\n        (word, cell) => (word += cell.getAttribute(\"data-letter\")),\r\n        \"\"\r\n      );\r\n\r\n      const reverseSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\r\n      if (this.words.indexOf(selectedWord) !== -1) {\r\n        this.foundWords.push(selectedWord);\r\n      } else if (this.words.indexOf(reverseSelectedWord) !== -1) {\r\n        this.foundWords.push(reverseSelectedWord);\r\n      } else {\r\n        this.selectedItems.forEach((item) => item.classList.remove(\"selected\"));\r\n      }\r\n      this.selectedItems = [];\r\n    });\r\n  }\r\n}\r\n","import { Grid } from \"./grid\";\r\n\r\n\r\nconst submitWordBtn = document.querySelector(\".submit-word\");\r\n\r\n\r\n\r\nsubmitWordBtn.addEventListener(\"click\", async() =>{\r\n    const grid = new Grid();\r\n    const commaSeperatedWords = document.querySelector(\"#add-word\").value;\r\n    const gridSize = document.querySelector(\"#grid-size\").value;\r\n    let result = await fetchGridInfo(gridSize, commaSeperatedWords);\r\n    grid.words = commaSeperatedWords.split(\",\");\r\n    grid.renderGrid(gridSize, result);\r\n    let wordListNode =document.createTextNode(grid.words);\r\n    let wordListSection = document.querySelector(\".word-list\");\r\n    \r\n    \r\n    if (wordListSection.lastChild) {\r\n      wordListSection.removeChild(wordListSection.lastChild);\r\n    }\r\n    wordListSection.appendChild(wordListNode);\r\n});\r\n\r\nasync function fetchGridInfo(gridSize, commaSeperatedWords){\r\n   \r\n    let response = await fetch(`http://localhost:8080/wordgrid?gridSize=${gridSize}&wordList=${commaSeperatedWords}`);\r\n    let result = await response.text();\r\n    return result.split(\" \");\r\n}"],"names":["$29289ae2f853543e$export$ef2184bd89960b14","this","wordSelectMode","selectedItems","firstSelectedItem","gridArea","words","foundWords","getCellsInrange","firstLetter","currentLetter","cellsInRange","x","y","i","push","querySelector","i1","delta","renderGrid","gridSize","wordGrid","document","getElementsByClassName","lastChild","removeChild","tbl","createElement","tblBody","index","row","j","cell","letter","cellText","createTextNode","appendChild","setAttribute","addEventListener","event","target","getAttribute","cell1","forEach","classList","remove","add","selectedWord","reduce","word","reverseSelectedWord","split","reverse","join","indexOf","item","async","grid","commaSeperatedWords","value","result","response","fetch","text","$8f6a480bb40b134f$var$fetchGridInfo","wordListNode","wordListSection"],"version":3,"file":"index.c7dc3a8b.js.map"}